"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"de3b6cf6f740\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/OTU4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImRlM2I2Y2Y2Zjc0MFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/providers/FirestoreSyncProvider.tsx":
/*!************************************************************!*\
  !*** ./src/components/providers/FirestoreSyncProvider.tsx ***!
  \************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ FirestoreSyncProvider; },\n/* harmony export */   useFirestore: function() { return /* binding */ useFirestore; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/firestore-services */ \"(app-pages-browser)/./src/lib/firestore-services.ts\");\n/* __next_internal_client_entry_do_not_use__ useFirestore,default auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst FirestoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction useFirestore() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(FirestoreContext);\n    if (context === undefined) {\n        throw new Error(\"useFirestore must be used within a FirestoreSyncProvider\");\n    }\n    return context;\n}\n_s(useFirestore, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction writeAndDispatch(key, value) {\n    if (false) {}\n    const json = JSON.stringify(value);\n    localStorage.setItem(key, json);\n    // synthetic storage event so existing listeners react immediately\n    window.dispatchEvent(new StorageEvent(\"storage\", {\n        key,\n        newValue: json\n    }));\n}\nfunction FirestoreSyncProvider(param) {\n    let { children } = param;\n    _s1();\n    // State\n    const [hourlyEntries, setHourlyEntries] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [bigCatches, setBigCatches] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [competitors, setCompetitors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [judges, setJudges] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [competitionSettings, setCompetitionSettings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [publicAppearanceSettings, setPublicAppearanceSettings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [auditLogs, setAuditLogs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let unsubscribers = [];\n        try {\n            // Subscribe to hourly entries\n            const unHourly = _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.HourlyEntryService.subscribeToHourlyEntries((rows)=>{\n                setHourlyEntries(rows);\n                // Sync to localStorage for compatibility\n                const hourly = {};\n                for (const r of rows){\n                    var _r_timestamp;\n                    var _hourly, _sector, _hourly_sector, _hour;\n                    const sector = r.sector;\n                    const hour = r.hour;\n                    const cId = r.competitorId;\n                    if (!sector || !hour || !cId) continue;\n                    var _;\n                    (_ = (_hourly = hourly)[_sector = sector]) !== null && _ !== void 0 ? _ : _hourly[_sector] = {};\n                    var _1;\n                    (_1 = (_hourly_sector = hourly[sector])[_hour = hour]) !== null && _1 !== void 0 ? _1 : _hourly_sector[_hour] = {};\n                    hourly[sector][hour][cId] = {\n                        competitorId: cId,\n                        boxNumber: r.boxNumber,\n                        fishCount: r.fishCount,\n                        totalWeight: r.totalWeight,\n                        status: r.status,\n                        source: r.source,\n                        timestamp: ((_r_timestamp = r.timestamp) === null || _r_timestamp === void 0 ? void 0 : _r_timestamp.toDate) ? r.timestamp.toDate() : r.timestamp\n                    };\n                }\n                writeAndDispatch(\"hourlyData\", hourly);\n            }, (err)=>{\n                console.warn(\"Firestore hourly_entries subscribe error:\", (err === null || err === void 0 ? void 0 : err.code) || (err === null || err === void 0 ? void 0 : err.message) || err);\n                setError(\"Erreur hourly entries: \".concat((err === null || err === void 0 ? void 0 : err.message) || \"Unknown error\"));\n            });\n            unsubscribers.push(unHourly);\n            // Subscribe to big catches\n            const unBig = _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.BigCatchService.subscribeToBigCatches((rows)=>{\n                setBigCatches(rows);\n                // Sync to localStorage for compatibility\n                const big = {};\n                for (const r of rows){\n                    var _r_timestamp;\n                    var _big, _sector;\n                    const sector = r.sector;\n                    const cId = r.competitorId;\n                    if (!sector || !cId) continue;\n                    var _;\n                    (_ = (_big = big)[_sector = sector]) !== null && _ !== void 0 ? _ : _big[_sector] = {};\n                    big[sector][cId] = {\n                        competitorId: cId,\n                        boxNumber: r.boxNumber,\n                        biggestCatch: r.biggestCatch,\n                        status: r.status,\n                        source: r.source,\n                        timestamp: ((_r_timestamp = r.timestamp) === null || _r_timestamp === void 0 ? void 0 : _r_timestamp.toDate) ? r.timestamp.toDate() : r.timestamp\n                    };\n                }\n                writeAndDispatch(\"grossePriseData\", big);\n            }, (err)=>{\n                console.warn(\"Firestore big_catches subscribe error:\", (err === null || err === void 0 ? void 0 : err.code) || (err === null || err === void 0 ? void 0 : err.message) || err);\n                setError(\"Erreur big catches: \".concat((err === null || err === void 0 ? void 0 : err.message) || \"Unknown error\"));\n            });\n            unsubscribers.push(unBig);\n            // Subscribe to competitors\n            const unCompetitors = _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.CompetitorService.subscribeToCompetitors((rows)=>{\n                setCompetitors(rows);\n                writeAndDispatch(\"competitors\", rows);\n            }, (err)=>{\n                console.warn(\"Firestore competitors subscribe error:\", (err === null || err === void 0 ? void 0 : err.code) || (err === null || err === void 0 ? void 0 : err.message) || err);\n                setError(\"Erreur competitors: \".concat((err === null || err === void 0 ? void 0 : err.message) || \"Unknown error\"));\n            });\n            unsubscribers.push(unCompetitors);\n            // Subscribe to judges\n            const unJudges = _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.JudgeService.subscribeToJudges((rows)=>{\n                setJudges(rows);\n                writeAndDispatch(\"judges\", rows);\n            }, (err)=>{\n                console.warn(\"Firestore judges subscribe error:\", (err === null || err === void 0 ? void 0 : err.code) || (err === null || err === void 0 ? void 0 : err.message) || err);\n                setError(\"Erreur judges: \".concat((err === null || err === void 0 ? void 0 : err.message) || \"Unknown error\"));\n            });\n            unsubscribers.push(unJudges);\n            // Subscribe to competition settings\n            const unSettings = _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.CompetitionSettingsService.subscribeToSettings((rows)=>{\n                const settings = rows;\n                setCompetitionSettings(settings);\n                if (settings) {\n                    writeAndDispatch(\"competitionSettings\", settings);\n                }\n            }, (err)=>{\n                console.warn(\"Firestore competition_settings subscribe error:\", (err === null || err === void 0 ? void 0 : err.code) || (err === null || err === void 0 ? void 0 : err.message) || err);\n                setError(\"Erreur settings: \".concat((err === null || err === void 0 ? void 0 : err.message) || \"Unknown error\"));\n            });\n            unsubscribers.push(unSettings);\n            // Subscribe to public appearance settings\n            const unAppearance = _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.PublicAppearanceService.subscribeToSettings((rows)=>{\n                const settings = rows;\n                setPublicAppearanceSettings(settings);\n                if (settings) {\n                    writeAndDispatch(\"publicAppearanceSettings\", settings);\n                }\n            }, (err)=>{\n                console.warn(\"Firestore public_appearance_settings subscribe error:\", (err === null || err === void 0 ? void 0 : err.code) || (err === null || err === void 0 ? void 0 : err.message) || err);\n                setError(\"Erreur appearance: \".concat((err === null || err === void 0 ? void 0 : err.message) || \"Unknown error\"));\n            });\n            unsubscribers.push(unAppearance);\n            // Subscribe to audit logs\n            const unAudit = _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.AuditLogService.subscribeToAuditLogs((rows)=>{\n                setAuditLogs(rows);\n            }, (err)=>{\n                console.warn(\"Firestore audit_logs subscribe error:\", (err === null || err === void 0 ? void 0 : err.code) || (err === null || err === void 0 ? void 0 : err.message) || err);\n                setError(\"Erreur audit: \".concat((err === null || err === void 0 ? void 0 : err.message) || \"Unknown error\"));\n            });\n            unsubscribers.push(unAudit);\n            setIsLoading(false);\n        } catch (e) {\n            console.warn(\"Firestore sync init failed:\", e);\n            setError(\"Erreur d'initialisation: \".concat(e));\n            setIsLoading(false);\n        }\n        return ()=>{\n            unsubscribers.forEach((unsub)=>{\n                try {\n                    unsub();\n                } catch (e) {\n                    console.warn(\"Error unsubscribing:\", e);\n                }\n            });\n        };\n    }, []);\n    // Action handlers\n    const saveHourlyEntry = async (data)=>{\n        try {\n            await _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.HourlyEntryService.saveHourlyEntry(data);\n        } catch (error) {\n            console.error(\"Error saving hourly entry:\", error);\n            throw error;\n        }\n    };\n    const saveBigCatch = async (data)=>{\n        try {\n            await _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.BigCatchService.saveBigCatch(data);\n        } catch (error) {\n            console.error(\"Error saving big catch:\", error);\n            throw error;\n        }\n    };\n    const saveCompetitor = async (data)=>{\n        try {\n            await _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.CompetitorService.saveCompetitor(data);\n        } catch (error) {\n            console.error(\"Error saving competitor:\", error);\n            throw error;\n        }\n    };\n    const saveJudge = async (data)=>{\n        try {\n            await _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.JudgeService.saveJudge(data);\n        } catch (error) {\n            console.error(\"Error saving judge:\", error);\n            throw error;\n        }\n    };\n    const saveCompetitionSettings = async (data)=>{\n        try {\n            await _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.CompetitionSettingsService.saveSettings(data);\n        } catch (error) {\n            console.error(\"Error saving competition settings:\", error);\n            throw error;\n        }\n    };\n    const savePublicAppearanceSettings = async (data)=>{\n        try {\n            await _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.PublicAppearanceService.saveSettings(data);\n        } catch (error) {\n            console.error(\"Error saving public appearance settings:\", error);\n            throw error;\n        }\n    };\n    const auditLog = async (data)=>{\n        try {\n            // Get current user info for audit logging\n            const userId = \"system\"; // TODO: Get from auth context\n            const userEmail = \"system@app.com\"; // TODO: Get from auth context\n            await _lib_firestore_services__WEBPACK_IMPORTED_MODULE_2__.AuditLogService.logAuditAction({\n                ...data,\n                userId,\n                userEmail\n            });\n        } catch (error) {\n            console.error(\"Error logging audit action:\", error);\n            throw error;\n        }\n    };\n    const contextValue = {\n        // Data\n        hourlyEntries,\n        bigCatches,\n        competitors,\n        judges,\n        competitionSettings,\n        publicAppearanceSettings,\n        auditLogs,\n        // Actions\n        saveHourlyEntry,\n        saveBigCatch,\n        saveCompetitor,\n        saveJudge,\n        saveCompetitionSettings,\n        savePublicAppearanceSettings,\n        auditLog,\n        // Status\n        isLoading,\n        error\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FirestoreContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"/home/project/src/components/providers/FirestoreSyncProvider.tsx\",\n        lineNumber: 329,\n        columnNumber: 5\n    }, this);\n}\n_s1(FirestoreSyncProvider, \"q+tGzZQC0A00oyxFWg2PI//I+9Y=\");\n_c = FirestoreSyncProvider;\nvar _c;\n$RefreshReg$(_c, \"FirestoreSyncProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/providers/FirestoreSyncProvider.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/firestore-services.ts":
/*!***************************************!*\
  !*** ./src/lib/firestore-services.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuditLogService: function() { return /* binding */ AuditLogService; },\n/* harmony export */   BigCatchService: function() { return /* binding */ BigCatchService; },\n/* harmony export */   COLLECTIONS: function() { return /* binding */ COLLECTIONS; },\n/* harmony export */   CompetitionSettingsService: function() { return /* binding */ CompetitionSettingsService; },\n/* harmony export */   CompetitorService: function() { return /* binding */ CompetitorService; },\n/* harmony export */   HourlyEntryService: function() { return /* binding */ HourlyEntryService; },\n/* harmony export */   JudgeService: function() { return /* binding */ JudgeService; },\n/* harmony export */   PublicAppearanceService: function() { return /* binding */ PublicAppearanceService; },\n/* harmony export */   logAuditAction: function() { return /* binding */ logAuditAction; },\n/* harmony export */   saveBigCatch: function() { return /* binding */ saveBigCatch; },\n/* harmony export */   saveCompetitionSettings: function() { return /* binding */ saveCompetitionSettings; },\n/* harmony export */   saveCompetitor: function() { return /* binding */ saveCompetitor; },\n/* harmony export */   saveHourlyEntry: function() { return /* binding */ saveHourlyEntry; },\n/* harmony export */   saveJudge: function() { return /* binding */ saveJudge; },\n/* harmony export */   savePublicAppearanceSettings: function() { return /* binding */ savePublicAppearanceSettings; }\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n\n\n// Collection names\nconst COLLECTIONS = {\n    COMPETITORS: \"competitors\",\n    HOURLY_ENTRIES: \"hourly_entries\",\n    BIG_CATCHES: \"big_catches\",\n    JUDGES: \"judges\",\n    COMPETITION_SETTINGS: \"competitionSettings\",\n    PUBLIC_APPEARANCE_SETTINGS: \"publicAppearanceSettings\",\n    AUDIT_LOGS: \"audit_logs\"\n};\n// Competitor Service\nclass CompetitorService {\n    static async saveCompetitor(competitor) {\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.COMPETITORS, competitor.id);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(docRef, {\n                ...competitor,\n                createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            }, {\n                merge: true\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error saving competitor:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n    static async getAllCompetitors() {\n        try {\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.COMPETITORS));\n            return querySnapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n        } catch (error) {\n            console.error(\"Error getting competitors:\", error);\n            return [];\n        }\n    }\n    static subscribeToCompetitors(callback) {\n        return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.COMPETITORS), (snapshot)=>{\n            const competitors = snapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            callback(competitors);\n        }, (error)=>{\n            console.error(\"Error listening to competitors:\", error);\n        });\n    }\n    static async deleteCompetitor(id) {\n        try {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.COMPETITORS, id));\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error deleting competitor:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n}\n// Hourly Entry Service\nclass HourlyEntryService {\n    static async saveHourlyEntry(entry) {\n        try {\n            const docId = \"\".concat(entry.sector, \"-\").concat(entry.hour, \"-\").concat(entry.competitorId);\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.HOURLY_ENTRIES, docId);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(docRef, {\n                ...entry,\n                id: docId,\n                timestamp: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            }, {\n                merge: true\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error saving hourly entry:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n    static subscribeToHourlyEntries(callback) {\n        return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.HOURLY_ENTRIES), (snapshot)=>{\n            const entries = snapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            callback(entries);\n        }, (error)=>{\n            console.error(\"Error listening to hourly entries:\", error);\n        });\n    }\n}\n// Big Catch Service\nclass BigCatchService {\n    static async saveBigCatch(entry) {\n        try {\n            const docId = \"\".concat(entry.sector, \"-\").concat(entry.competitorId);\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.BIG_CATCHES, docId);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(docRef, {\n                ...entry,\n                id: docId,\n                timestamp: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            }, {\n                merge: true\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error saving big catch:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n    static subscribeToBigCatches(callback) {\n        return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.BIG_CATCHES), (snapshot)=>{\n            const entries = snapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            callback(entries);\n        }, (error)=>{\n            console.error(\"Error listening to big catches:\", error);\n        });\n    }\n}\n// Judge Service\nclass JudgeService {\n    static async saveJudge(judge) {\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.JUDGES, judge.uid);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(docRef, {\n                ...judge,\n                createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            }, {\n                merge: true\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error saving judge:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n    static async getJudgeByUid(uid) {\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.JUDGES, uid);\n            const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(docRef);\n            if (docSnap.exists()) {\n                return {\n                    uid: docSnap.id,\n                    ...docSnap.data()\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error getting judge:\", error);\n            return null;\n        }\n    }\n    static subscribeToJudges(callback) {\n        return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.JUDGES), (snapshot)=>{\n            const judges = snapshot.docs.map((doc)=>({\n                    uid: doc.id,\n                    ...doc.data()\n                }));\n            callback(judges);\n        }, (error)=>{\n            console.error(\"Error listening to judges:\", error);\n        });\n    }\n}\n// Competition Settings Service\nclass CompetitionSettingsService {\n    static async saveSettings(settings) {\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.COMPETITION_SETTINGS, \"main\");\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(docRef, {\n                ...settings,\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            }, {\n                merge: true\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error saving competition settings:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n    static async getSettings() {\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.COMPETITION_SETTINGS, \"main\");\n            const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(docRef);\n            if (docSnap.exists()) {\n                return {\n                    id: docSnap.id,\n                    ...docSnap.data()\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error getting competition settings:\", error);\n            return null;\n        }\n    }\n    static subscribeToSettings(callback) {\n        return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.COMPETITION_SETTINGS, \"main\"), (doc)=>{\n            if (doc.exists()) {\n                callback({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            } else {\n                callback(null);\n            }\n        }, (error)=>{\n            console.error(\"Error listening to competition settings:\", error);\n        });\n    }\n}\n// Public Appearance Settings Service\nclass PublicAppearanceService {\n    static async saveSettings(settings) {\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.PUBLIC_APPEARANCE_SETTINGS, \"main\");\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(docRef, {\n                ...settings,\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            }, {\n                merge: true\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error saving public appearance settings:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n    static async getSettings() {\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.PUBLIC_APPEARANCE_SETTINGS, \"main\");\n            const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(docRef);\n            if (docSnap.exists()) {\n                return {\n                    id: docSnap.id,\n                    ...docSnap.data()\n                };\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error getting public appearance settings:\", error);\n            return null;\n        }\n    }\n    static subscribeToSettings(callback) {\n        return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.PUBLIC_APPEARANCE_SETTINGS, \"main\"), (doc)=>{\n            if (doc.exists()) {\n                callback({\n                    id: doc.id,\n                    ...doc.data()\n                });\n            } else {\n                callback(null);\n            }\n        }, (error)=>{\n            console.error(\"Error listening to public appearance settings:\", error);\n            // Provide fallback null data on permission errors\n            callback(null);\n        });\n    }\n}\n// Audit Log Service\nclass AuditLogService {\n    static async logAuditAction(data) {\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.AUDIT_LOGS));\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(docRef, {\n                ...data,\n                id: docRef.id,\n                timestamp: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Error logging audit action:\", error);\n            return {\n                success: false,\n                error\n            };\n        }\n    }\n    static subscribeToAuditLogs(callback) {\n        return (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, COLLECTIONS.AUDIT_LOGS), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"timestamp\", \"desc\")), (snapshot)=>{\n            const logs = snapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            callback(logs);\n        }, (error)=>{\n            console.error(\"Error listening to audit logs:\", error);\n        });\n    }\n}\n// Export convenience functions for backward compatibility\nconst saveHourlyEntry = HourlyEntryService.saveHourlyEntry;\nconst saveBigCatch = BigCatchService.saveBigCatch;\nconst saveCompetitor = CompetitorService.saveCompetitor;\nconst saveJudge = JudgeService.saveJudge;\nconst saveCompetitionSettings = CompetitionSettingsService.saveSettings;\nconst savePublicAppearanceSettings = PublicAppearanceService.saveSettings;\nconst logAuditAction = AuditLogService.logAuditAction;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/firestore-services.ts\n"));

/***/ })

});